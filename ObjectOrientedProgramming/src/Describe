객체 지향 프로그래밍

 객체 지향 프로그래밍은 좀 더 나은 프로그램을 만들기 위한 프로그래밍 패러다임으로 로직을 상태(State)와
 행위(Behave)로 이루어진 객체로 만드는 것이다. 이 객체들을 마치 레고 블럭처럼 조립해서 하나의 프로그램을
 만드는 것이 객체지향 프로그래밍이라고 할 수 있다. 다시 말해서 객체지향 프로그래밍은 객체를 만드는 것이다.


문법과 설계

문법
    하나는 객체지향을 편하게 할 수 있도록 언어가 제공하는 기능을 익히는 것이다.
    객체를 만드는 법에 대한 학습.

설계
    두번쨰는 좋은 객체를 만드는 법이다. 이것은 다른 말로는 설계를 잘하는 법이라고 할 수 있다.
    좋은 설계는 현실을 잘 반영해야 한다.

    복잡함 속에서 필요한 관점만을 추출하는 행위를 추상화라고 한다.
    프로그램을 만드는 것은 소프트웨어의 추상화라고 한다.

부품화
    연관된 메소드와 그 메소드가 사용하는 변수들을 분류하고 그룹핑하는 것이다.

    1. 은닉화
        부품화라고 하는 목표는 단순히 동일한 기능을 하는 메소드와 변수를 그룹핑한다고 달성되는 것은 아니다.
        제대로된 부품이라면 그것이 어떻게 만들어졌는지 모르는 사람도 그 부품을 사용하는 방법만 알면 쓸 수 있어야한다.
        즉, 내부의 동작 방법을 단단한 케이스 안으로 숨기고 사용자에게는 그 부품의 사용방법만을 노출하고 있는 것이다.
        이러한 컨셉을 정보의 은닉화(Information Hiding), 또는 캡슐화(Encapsulation)라고 부른다.
    2. 인터페이스
        각각의 부품은 미리 정해진 약속에 따라서 신호를 입출력하고, 연결점의 모양을 표준에 맞게 만들면 된다.
        이러한 연결점을 인터페이스(interface)라고 한다.
        인터페이스란 이질적인 것들이 결합하는 것을 막아주는 역할도 한다. 즉, 인터페이스는 부품들 간의 약속이다.
